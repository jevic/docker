Docker的主要优点：
轻量级资源使用：容器在进程级别隔离并使用宿主机的内核，而不需要虚拟化整个操作系统。

可移植性：一个容器应用所需要的依赖都在容器中，这就让它可以在任意一台Docker主机上运行。

可预测性：宿主机不需要关心容器内运行的是什么，同样，容器也不需要关心是在哪个宿主机上运行。所需要的接口都是标准化的，并且交互也都是可预测的。

通常在用Docker来设计应用或者服务时，最好的方法是打破面向服务架构的设计，而采用独立容器的设计。这让使用者在以后的使用中更容易的独立扩展或者升级组件。拥有如此的灵活性是人们对用Docker开发和部署感兴趣的原因之一。
服


etcd：服务发现/全局分布式键值对存储
consul：服务发现/全局分布式键值对存储
zookeeper：服务发现/全局分布式键值对存储
crypt：加密etcd条目的项目
confd：观测键值对存储变更和新值的触发器重新配置服务

Docker网络功能的项目有：
flannel：覆盖网络提供给每个宿主机一个独立子网
weave：覆盖网络描述一个网络上的所有容器
pipework：一个高级网络工具，它用于任意高级网络配置

请求来自API或者管理工具。然后，调度器衡量请求的条件和可用的宿主机的状态。
在这个例子中，它从一个分布式数据存储/发现服务中获取容器密度的信息，以便它可以在一个不是很忙的宿主机上运行新应用。


一些流行的负责调度和集群管理的工具：
fleet: 调度器和集群管理工具
marathon:调度器和集群管理工具
Swarm:调度器和集群管理工具
mesos:宿主机抽象服务，用于为调度器联合宿主机资源
kubernetes:一个管理容器组的工具，具有先进的调度能力
compose:一个用于创建容器组的容器编排工具



Dockerfile非常实用，并且容易掌握，它有以下几个优点：
易于版本控制：Dockerfile文件可以提交到一个版本控制软件中来追踪变更和复现任何错误。
可预测性：基于Dockerfile构建镜像可以从镜像创建的环节来避免操作上的错误。
问责制：如果要分享你的镜像，最好的办法是提供Dockerfile，这样别人可以创建这个镜像并审阅这个过程。Dockerfile提供了创建这个镜像的历史操作步骤。
灵活性：基于Dockerfile来创建镜像，可以覆盖原有的默认的构建配置。也就是说在构建或者运行时你不需要再输入那些复杂的命令行参数。
在实现可重复的自动化构建容器方面，Dockerfile是一个非常好的工具
